Node.js - NPM

Node Package Manager (NPM) provides two main functionalities;

> Online repositories for node.js packages/modules which are searchable on search.nodejs.org

> Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.

NPM comes bundled with Node.js installables after v0.6.3 version. 

To verify the same, open console and type the following command and see the result -

$ npm --version

2.7.1

If you are running an old version of NPM then it is quite easy to update it to the latest version. Just use the following command from root;

$ sudo npm install npm -g
/usr/bin/npm -> /usr/lib/node_modules/npm/bin/npm-cli.js
npm@2.7.1 /usr/lib/node_modules/npm



Installing Modules using NPM

There is a simple syntax to install any Node.js module -

$ npm install <Module Name>

For example, following is the command to install a famous Node.js web framework module called express;

$ npm install express

Now you can use this module in your js file as following;

var express = require('express');


Global vs Local Installation:

By default, NPM installs any dependency in the local mode. 

Here local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. 

Locally deployed packages are accessible via require() method. 

For example, when we installed express module, it created node_modules directory in the current directory where it installed the express module.

$ ls -l
total 0
drwxr-xr-x 3 root root 20 Mar 17 02:23 node_modules


Alternatively, you can use npm ls command to list down all the locally installed modules.

Globally installed packages/dependencies are stored in system directory. 

Such dependencies can be used in CLI (Command Line Interface) function of any node.js but cannot be imported using require() in Node application directly.
 

Now let's try installing the express module using global installation.

$ npm install express -g

This will produce a similar result but the module will be installed globally. 


You can use the following command to check all the modules installed globally;

$ npm ls -g



Using package.json:

package.json is present in the root directory of any Node application/module and is used to define the properties of a package. 

Let's open package.json of express package present in node_modules/express/



Attributes of Package.json:

name - name of the package

version - version of the package

description - description of the package

homepage - homepage of the package

author - author of the package

contributors - name of the contributors to the package

dependencies - list of dependencies. NPM automatically installs all the dependencies mentioned here in the node_module folder of the package.

repository - repository type and URL of the package

main - entry point of the package

keywords - keywords




Uninstalling a Module:

Use the following command to uninstall a Node.js module.


$ npm uninstall express


Once NPM uninstalls the package, you can verify it by looking at the content of /node_modules/ directory or type the following command;

$ npm ls


Updating a Module:

Update package.json and change the version of the dependency to be updated and run the following command.

$ npm update express



Search a Module:
Search a package name using NPM.

$ npm search express


Create a Module:

Creating a module requires package.json to be generated. 

Let's generate package.json using NPM, which will generate the basic skeleton of the package.json.

$ npm init


This utility will walk you through creating a package.json file.

It only covers the most common items, and tries to guess sane defaults.

Use 'npm install <pkg> --save' afterwards to install a package and save it as a dependency in the package.json file.

Press ^C at any time to quit.

name: (webmaster)

You will need to provide all the required information about your module. 

You can take help from the above-mentioned package.json file to understand the meanings of various information demanded. 

Once package.json is generated, use the following command to register yourself with NPM repository site using a valid email address.

$ npm adduser

Username: mcmohd
Password:
Email: (this IS public) mcmohd@gmail.com


It is time now to publish your module;

$ npm publish

If everything is fine with your module, then it will be published in the repository and will be accessible to install using NPM like any
other Node.js module.
